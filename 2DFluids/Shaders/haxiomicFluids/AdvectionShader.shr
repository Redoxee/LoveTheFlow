#ifdef VERTEX

vec4 position( mat4 transform_projection, vec4 vertex_position )
{
    return transform_projection * vertex_position;
}
#endif
 
#ifdef PIXEL

vec2 simToTexelSpace(vec2 sim){
	return (vec2(sim) + vec2(1.)) * 0.5;
}

uniform sampler2D target;

float renderSize = ##RENDERSIZE;
float rdx = 1.0f/##RENDERSIZE.0f;

vec2 invresolution = vec2(1.0/##RENDERSIZE);

uniform float dt;

vec4 effect( vec4 color, Image velocity, vec2 texCoord, vec2 screen_coords)
{
	vec2 clipPosition = (texCoord * 2. - 1.);

	vec2 p = clipPosition;
	vec2 tracedPos = p - dt * rdx * texture2D(velocity, clipPosition ).xy;
	tracedPos = simToTexelSpace(tracedPos)/invresolution; // texel coordinates

	vec4 st;
	st.xy = floor(tracedPos-.5)+.5; //left & bottom cell centers
	st.zw = st.xy+1.;               //right & top centers
	vec2 t = tracedPos - st.xy;

	st*=invresolution.xyxy; //to unitary coords
	
	vec4 tex11 = texture2D(target, st.xy );
	vec4 tex21 = texture2D(target, st.zy );
	vec4 tex12 = texture2D(target, st.xw );
	vec4 tex22 = texture2D(target, st.zw );

	//need to bilerp this result
	vec4 col = mix(mix(tex11, tex21, t.x), mix(tex12, tex22, t.x), t.y);
	return vec4(col.xyz,1.);
}
#endif